/* automatically generated by rust-bindgen 0.63.0 */

#![allow(non_snake_case)]

#[repr(C)]
#[derive(Copy, Clone)]
pub union CBasePlayer {
    pub __size: [::std::os::raw::c_char; 7426usize],
    pub player_index: CBasePlayer__bindgen_ty_1,
    pub team: CBasePlayer__bindgen_ty_2,
    pub has_bad_reputation: CBasePlayer__bindgen_ty_3,
    pub community_name: CBasePlayer__bindgen_ty_4,
    pub community_clan_tag: CBasePlayer__bindgen_ty_5,
    pub faction_name: CBasePlayer__bindgen_ty_6,
    pub hardware_icon: CBasePlayer__bindgen_ty_7,
    pub happy_hour_active: CBasePlayer__bindgen_ty_8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CBasePlayer__bindgen_ty_1 {
    pub pad: [::std::os::raw::c_char; 88usize],
    pub player_index: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_CBasePlayer__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CBasePlayer__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBasePlayer__bindgen_ty_1>(),
        92usize,
        concat!("Size of: ", stringify!(CBasePlayer__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<CBasePlayer__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(CBasePlayer__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBasePlayer__bindgen_ty_1),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).player_index) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CBasePlayer__bindgen_ty_1),
            "::",
            stringify!(player_index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CBasePlayer__bindgen_ty_2 {
    pub pad2: [::std::os::raw::c_char; 1508usize],
    pub team: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CBasePlayer__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<CBasePlayer__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBasePlayer__bindgen_ty_2>(),
        1512usize,
        concat!("Size of: ", stringify!(CBasePlayer__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<CBasePlayer__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(CBasePlayer__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBasePlayer__bindgen_ty_2),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).team) as usize - ptr as usize },
        1508usize,
        concat!(
            "Offset of field: ",
            stringify!(CBasePlayer__bindgen_ty_2),
            "::",
            stringify!(team)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CBasePlayer__bindgen_ty_3 {
    pub pad18: [::std::os::raw::c_char; 7312usize],
    pub has_bad_reputation: bool,
}
#[test]
fn bindgen_test_layout_CBasePlayer__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<CBasePlayer__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBasePlayer__bindgen_ty_3>(),
        7313usize,
        concat!("Size of: ", stringify!(CBasePlayer__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<CBasePlayer__bindgen_ty_3>(),
        1usize,
        concat!("Alignment of ", stringify!(CBasePlayer__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad18) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBasePlayer__bindgen_ty_3),
            "::",
            stringify!(pad18)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_bad_reputation) as usize - ptr as usize },
        7312usize,
        concat!(
            "Offset of field: ",
            stringify!(CBasePlayer__bindgen_ty_3),
            "::",
            stringify!(has_bad_reputation)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CBasePlayer__bindgen_ty_4 {
    pub pad17: [::std::os::raw::c_char; 7313usize],
    pub community_name: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_CBasePlayer__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<CBasePlayer__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBasePlayer__bindgen_ty_4>(),
        7377usize,
        concat!("Size of: ", stringify!(CBasePlayer__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<CBasePlayer__bindgen_ty_4>(),
        1usize,
        concat!("Alignment of ", stringify!(CBasePlayer__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad17) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBasePlayer__bindgen_ty_4),
            "::",
            stringify!(pad17)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).community_name) as usize - ptr as usize },
        7313usize,
        concat!(
            "Offset of field: ",
            stringify!(CBasePlayer__bindgen_ty_4),
            "::",
            stringify!(community_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CBasePlayer__bindgen_ty_5 {
    pub pad16: [::std::os::raw::c_char; 7377usize],
    pub community_clan_tag: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_CBasePlayer__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<CBasePlayer__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBasePlayer__bindgen_ty_5>(),
        7393usize,
        concat!("Size of: ", stringify!(CBasePlayer__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<CBasePlayer__bindgen_ty_5>(),
        1usize,
        concat!("Alignment of ", stringify!(CBasePlayer__bindgen_ty_5))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBasePlayer__bindgen_ty_5),
            "::",
            stringify!(pad16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).community_clan_tag) as usize - ptr as usize },
        7377usize,
        concat!(
            "Offset of field: ",
            stringify!(CBasePlayer__bindgen_ty_5),
            "::",
            stringify!(community_clan_tag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CBasePlayer__bindgen_ty_6 {
    pub pad15: [::std::os::raw::c_char; 7393usize],
    pub faction_name: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_CBasePlayer__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<CBasePlayer__bindgen_ty_6> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBasePlayer__bindgen_ty_6>(),
        7409usize,
        concat!("Size of: ", stringify!(CBasePlayer__bindgen_ty_6))
    );
    assert_eq!(
        ::std::mem::align_of::<CBasePlayer__bindgen_ty_6>(),
        1usize,
        concat!("Alignment of ", stringify!(CBasePlayer__bindgen_ty_6))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad15) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBasePlayer__bindgen_ty_6),
            "::",
            stringify!(pad15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).faction_name) as usize - ptr as usize },
        7393usize,
        concat!(
            "Offset of field: ",
            stringify!(CBasePlayer__bindgen_ty_6),
            "::",
            stringify!(faction_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CBasePlayer__bindgen_ty_7 {
    pub pad14: [::std::os::raw::c_char; 7409usize],
    pub hardware_icon: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_CBasePlayer__bindgen_ty_7() {
    const UNINIT: ::std::mem::MaybeUninit<CBasePlayer__bindgen_ty_7> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBasePlayer__bindgen_ty_7>(),
        7425usize,
        concat!("Size of: ", stringify!(CBasePlayer__bindgen_ty_7))
    );
    assert_eq!(
        ::std::mem::align_of::<CBasePlayer__bindgen_ty_7>(),
        1usize,
        concat!("Alignment of ", stringify!(CBasePlayer__bindgen_ty_7))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad14) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBasePlayer__bindgen_ty_7),
            "::",
            stringify!(pad14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_icon) as usize - ptr as usize },
        7409usize,
        concat!(
            "Offset of field: ",
            stringify!(CBasePlayer__bindgen_ty_7),
            "::",
            stringify!(hardware_icon)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CBasePlayer__bindgen_ty_8 {
    pub pad13: [::std::os::raw::c_char; 7425usize],
    pub happy_hour_active: bool,
}
#[test]
fn bindgen_test_layout_CBasePlayer__bindgen_ty_8() {
    const UNINIT: ::std::mem::MaybeUninit<CBasePlayer__bindgen_ty_8> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBasePlayer__bindgen_ty_8>(),
        7426usize,
        concat!("Size of: ", stringify!(CBasePlayer__bindgen_ty_8))
    );
    assert_eq!(
        ::std::mem::align_of::<CBasePlayer__bindgen_ty_8>(),
        1usize,
        concat!("Alignment of ", stringify!(CBasePlayer__bindgen_ty_8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad13) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBasePlayer__bindgen_ty_8),
            "::",
            stringify!(pad13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).happy_hour_active) as usize - ptr as usize },
        7425usize,
        concat!(
            "Offset of field: ",
            stringify!(CBasePlayer__bindgen_ty_8),
            "::",
            stringify!(happy_hour_active)
        )
    );
}
#[test]
fn bindgen_test_layout_CBasePlayer() {
    const UNINIT: ::std::mem::MaybeUninit<CBasePlayer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBasePlayer>(),
        7428usize,
        concat!("Size of: ", stringify!(CBasePlayer))
    );
    assert_eq!(
        ::std::mem::align_of::<CBasePlayer>(),
        4usize,
        concat!("Alignment of ", stringify!(CBasePlayer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBasePlayer),
            "::",
            stringify!(__size)
        )
    );
}
