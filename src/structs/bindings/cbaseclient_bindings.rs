/* automatically generated by rust-bindgen 0.63.0 */
// with bindgen.exe .\bindgen_check.h --rustified-enum ePersistenceReady --rustified-enum eSignonState -- -std=c++14 -x c++ > bindings.rs

#![allow(non_camel_case_types,dead_code,clippy::upper_case_acronyms,non_snake_case)]

pub type KeyValues = ::std::os::raw::c_void;
pub type CBaseClients = *mut CBaseClient;
pub const PERSISTENCE_MAX_SIZE: ::std::os::raw::c_int = 56781;
impl ePersistenceReady {
    pub const READY_INSECURE: ePersistenceReady = ePersistenceReady::READY;
}
#[repr(i8)]
#[derive(Debug, Hash, PartialEq, Eq)]
pub enum ePersistenceReady {
    NOT_READY = 0,
    READY = 3,
    READY_REMOTE = 4,
}
#[repr(C)]
pub union CBaseClient {
    pub __size: [::std::os::raw::c_char; 186152usize],
    pub edict: std::mem::ManuallyDrop<CBaseClient__bindgen_ty_1>,
    pub name: std::mem::ManuallyDrop<CBaseClient__bindgen_ty_2>,
    pub con_vars: std::mem::ManuallyDrop<CBaseClient__bindgen_ty_3>,
    pub signon: std::mem::ManuallyDrop<CBaseClient__bindgen_ty_4>,
    pub clan_tag: std::mem::ManuallyDrop<CBaseClient__bindgen_ty_5>,
    pub fake_player: std::mem::ManuallyDrop<CBaseClient__bindgen_ty_6>,
    pub persistence_ready: std::mem::ManuallyDrop<CBaseClient__bindgen_ty_7>,
    pub persistence_buffer: std::mem::ManuallyDrop<CBaseClient__bindgen_ty_8>,
    pub uid: std::mem::ManuallyDrop<CBaseClient__bindgen_ty_9>,
}
#[repr(C)]
#[derive(Debug)]
pub struct CBaseClient__bindgen_ty_1 {
    pub pad: [::std::os::raw::c_char; 20usize],
    pub edict: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_CBaseClient__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CBaseClient__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBaseClient__bindgen_ty_1>(),
        22usize,
        concat!("Size of: ", stringify!(CBaseClient__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<CBaseClient__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(CBaseClient__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBaseClient__bindgen_ty_1),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edict) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CBaseClient__bindgen_ty_1),
            "::",
            stringify!(edict)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct CBaseClient__bindgen_ty_2 {
    pub pad2: [::std::os::raw::c_char; 22usize],
    pub m_Name: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_CBaseClient__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<CBaseClient__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBaseClient__bindgen_ty_2>(),
        86usize,
        concat!("Size of: ", stringify!(CBaseClient__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<CBaseClient__bindgen_ty_2>(),
        1usize,
        concat!("Alignment of ", stringify!(CBaseClient__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBaseClient__bindgen_ty_2),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_Name) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(CBaseClient__bindgen_ty_2),
            "::",
            stringify!(m_Name)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct CBaseClient__bindgen_ty_3 {
    pub pad18: [::std::os::raw::c_char; 600usize],
    pub m_ConVars: [*mut KeyValues; 64usize],
}
#[test]
fn bindgen_test_layout_CBaseClient__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<CBaseClient__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBaseClient__bindgen_ty_3>(),
        1112usize,
        concat!("Size of: ", stringify!(CBaseClient__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<CBaseClient__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(CBaseClient__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad18) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBaseClient__bindgen_ty_3),
            "::",
            stringify!(pad18)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_ConVars) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(CBaseClient__bindgen_ty_3),
            "::",
            stringify!(m_ConVars)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct CBaseClient__bindgen_ty_4 {
    pub pad17: [::std::os::raw::c_char; 672usize],
    pub m_Signon: i32,
}
#[test]
fn bindgen_test_layout_CBaseClient__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<CBaseClient__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBaseClient__bindgen_ty_4>(),
        676usize,
        concat!("Size of: ", stringify!(CBaseClient__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<CBaseClient__bindgen_ty_4>(),
        4usize,
        concat!("Alignment of ", stringify!(CBaseClient__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad17) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBaseClient__bindgen_ty_4),
            "::",
            stringify!(pad17)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_Signon) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(CBaseClient__bindgen_ty_4),
            "::",
            stringify!(m_Signon)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct CBaseClient__bindgen_ty_5 {
    pub pad16: [::std::os::raw::c_char; 856usize],
    pub m_ClanTag: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_CBaseClient__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<CBaseClient__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBaseClient__bindgen_ty_5>(),
        872usize,
        concat!("Size of: ", stringify!(CBaseClient__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<CBaseClient__bindgen_ty_5>(),
        1usize,
        concat!("Alignment of ", stringify!(CBaseClient__bindgen_ty_5))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBaseClient__bindgen_ty_5),
            "::",
            stringify!(pad16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_ClanTag) as usize - ptr as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(CBaseClient__bindgen_ty_5),
            "::",
            stringify!(m_ClanTag)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct CBaseClient__bindgen_ty_6 {
    pub pad15: [::std::os::raw::c_char; 1156usize],
    pub m_bFakePlayer: bool,
}
#[test]
fn bindgen_test_layout_CBaseClient__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<CBaseClient__bindgen_ty_6> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBaseClient__bindgen_ty_6>(),
        1157usize,
        concat!("Size of: ", stringify!(CBaseClient__bindgen_ty_6))
    );
    assert_eq!(
        ::std::mem::align_of::<CBaseClient__bindgen_ty_6>(),
        1usize,
        concat!("Alignment of ", stringify!(CBaseClient__bindgen_ty_6))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad15) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBaseClient__bindgen_ty_6),
            "::",
            stringify!(pad15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_bFakePlayer) as usize - ptr as usize },
        1156usize,
        concat!(
            "Offset of field: ",
            stringify!(CBaseClient__bindgen_ty_6),
            "::",
            stringify!(m_bFakePlayer)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct CBaseClient__bindgen_ty_7 {
    pub pad14: [::std::os::raw::c_char; 1184usize],
    pub m_iPersistenceReady: ePersistenceReady,
}
#[test]
fn bindgen_test_layout_CBaseClient__bindgen_ty_7() {
    const UNINIT: ::std::mem::MaybeUninit<CBaseClient__bindgen_ty_7> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBaseClient__bindgen_ty_7>(),
        1185usize,
        concat!("Size of: ", stringify!(CBaseClient__bindgen_ty_7))
    );
    assert_eq!(
        ::std::mem::align_of::<CBaseClient__bindgen_ty_7>(),
        1usize,
        concat!("Alignment of ", stringify!(CBaseClient__bindgen_ty_7))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad14) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBaseClient__bindgen_ty_7),
            "::",
            stringify!(pad14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_iPersistenceReady) as usize - ptr as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(CBaseClient__bindgen_ty_7),
            "::",
            stringify!(m_iPersistenceReady)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct CBaseClient__bindgen_ty_8 {
    pub pad13: [::std::os::raw::c_char; 1274usize],
    pub m_PersistenceBuffer: [::std::os::raw::c_char; 56781usize],
}
#[test]
fn bindgen_test_layout_CBaseClient__bindgen_ty_8() {
    const UNINIT: ::std::mem::MaybeUninit<CBaseClient__bindgen_ty_8> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBaseClient__bindgen_ty_8>(),
        58055usize,
        concat!("Size of: ", stringify!(CBaseClient__bindgen_ty_8))
    );
    assert_eq!(
        ::std::mem::align_of::<CBaseClient__bindgen_ty_8>(),
        1usize,
        concat!("Alignment of ", stringify!(CBaseClient__bindgen_ty_8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad13) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBaseClient__bindgen_ty_8),
            "::",
            stringify!(pad13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_PersistenceBuffer) as usize - ptr as usize },
        1274usize,
        concat!(
            "Offset of field: ",
            stringify!(CBaseClient__bindgen_ty_8),
            "::",
            stringify!(m_PersistenceBuffer)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct CBaseClient__bindgen_ty_9 {
    pub pad12: [::std::os::raw::c_char; 62720usize],
    pub m_UID: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_CBaseClient__bindgen_ty_9() {
    const UNINIT: ::std::mem::MaybeUninit<CBaseClient__bindgen_ty_9> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBaseClient__bindgen_ty_9>(),
        62752usize,
        concat!("Size of: ", stringify!(CBaseClient__bindgen_ty_9))
    );
    assert_eq!(
        ::std::mem::align_of::<CBaseClient__bindgen_ty_9>(),
        1usize,
        concat!("Alignment of ", stringify!(CBaseClient__bindgen_ty_9))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad12) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBaseClient__bindgen_ty_9),
            "::",
            stringify!(pad12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_UID) as usize - ptr as usize },
        62720usize,
        concat!(
            "Offset of field: ",
            stringify!(CBaseClient__bindgen_ty_9),
            "::",
            stringify!(m_UID)
        )
    );
}
#[test]
fn bindgen_test_layout_CBaseClient() {
    const UNINIT: ::std::mem::MaybeUninit<CBaseClient> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBaseClient>(),
        62752usize,
        concat!("Size of: ", stringify!(CBaseClient))
    );
    assert_eq!(
        ::std::mem::align_of::<CBaseClient>(),
        8usize,
        concat!("Alignment of ", stringify!(CBaseClient))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBaseClient),
            "::",
            stringify!(__size)
        )
    );
}